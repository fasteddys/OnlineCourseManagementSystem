@using OnlineCourseManagementSystem.Services.Data
@using OnlineCourseManagementSystem.Web.ViewModels.VideoConferences
@using Microsoft.AspNetCore.SignalR.Client;
@using OnlineCourseManagementSystem.Web.Interop;
@using Microsoft.Extensions.DependencyInjection

@inject ITwilioService TwilioService
@inject IJSRuntime JavaScript
@inject NavigationManager NavigationManager

<style>
    .video-item {
        background: #1e1e1e;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 360px;
        width: 360px;
    }

    .videos {
        width: 85%;
    }

    .video-item:hover {
        opacity: 0.5;
        transform: scale(1.02);
        transition: transform 350ms ease-in-out;
    }

    :root {
        --twilio-red: #F22F46;
        --twilio-blue: #0D122B;
    }

    .twilio-text {
        color: var(--twilio-red);
    }

    a.list-group-item.list-group-item-action.active {
        background-color: var(--twilio-blue);
        border-color: var(--twilio-blue);
    }

    .twilio-btn-red {
        background-color: var(--twilio-red);
        border-color: var(--twilio-red);
        color: #fff;
    }

        .twilio-btn-red:not(:disabled):hover {
            background-color: #D31027;
            border-color: #D31027;
        }

    .twilio-btn-blue {
        background-color: var(--twilio-blue);
        border-color: var(--twilio-blue);
        color: #fff;
    }

        .twilio-btn-blue:not(:disabled):hover {
            background-color: #00000C;
            border-color: #00000C;
        }

    input:disabled, .btn:disabled {
        border-color: #444;
        cursor: not-allowed;
    }

    audio {
        display: none;
    }

    .participants-grid {
        display: grid;
        grid-gap: 5px;
        grid-template-rows: 1fr 1fr;
        grid-template-columns: 1fr 1fr;
    }

        .participants-grid > div:nth-of-type(1) {
            grid-row: 1;
            grid-column: 1;
        }

        .participants-grid > div:nth-of-type(2) {
            grid-row: 1;
            grid-column: 2;
        }

        .participants-grid > div:nth-of-type(3) {
            grid-row: 2;
            grid-column: 1;
        }

        .participants-grid > div:nth-of-type(4) {
            grid-row: 2;
            grid-column: 2;
        }

    app {
        position: relative;
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .main {
        flex: 1;
    }

    .content {
        padding-top: 1.1rem;
    }

    .valid.modified:not([type=checkbox]) {
        outline: 1px solid #26b050;
    }

    .invalid {
        outline: 1px solid red;
    }

    .validation-message {
        color: red;
    }
</style>

<h3>VideoConference</h3>

<div class="d-flex mt-3">
    <div class="rounded mr-5 w-75">
        <div class="d-flex">
            <button type="button" class="btn twilio-btn-red" data-bs-toggle="modal" data-bs-target="#createRoomModal">
                Create Room
            </button>
        </div>
        <div class="col-9 pt-3">
            <div id="participants" class="participants-grid">
                <div class="embed-responsive embed-responsive-16by9">
                    <div id="camera" class="embed-responsive-item"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="rounded w-25 ">
        <div class="accordion accordion-flush mb-2" id="accordionFlushExample">
            <div class="accordion-item">
                <h2 class="accordion-header" id="flush-headingOne">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                        Options
                    </button>
                </h2>
                <div id="flush-collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
                    <div class="accordion-body">
                        @*<div class="py-1" style="box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;">
                                <button id="webcam-btn" class="btn  btn-info">Turn on </button>
                            </div>
                            <div class="py-1" style="box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;">
                                <a href="@this.NavigationManager.Uri/#" class="dropdown-item">Turn on Audio</a>
                            </div>
                            <div class="py-1" style="box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;">
                                <a href="@this.NavigationManager.Uri/#" class="dropdown-item">Share Screen</a>
                            </div>*@
                        <div class="m-2">
                            <Cameras CameraChanged="OnCameraChanged" />
                        </div>

                        @if (!string.IsNullOrEmpty(this.activeRoom))
                        {
                            <div class="m-1 d-flex justify-content-between align-items-center">
                                <button class="btn btn-lg twilio-btn-red w-100" @onclick="@(async _ => await this.OnLeaveRoom())">Leave Room?</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header">
                <h2>
                    Rooms <span class="badge badge-light">@(this.rooms?.Count ?? 0)</span>
                </h2>
            </div>
            <div class="card-body">
                <div class="d-flex my-2">
                    @if (!(this.rooms?.Any() ?? false))
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <p class="lead mb-0">
                                Add a room to begin. Other online participants can join or create rooms.
                            </p>
                        </div>
                    }
                    else
                    {
                        @foreach (var room in this.rooms!)
                        {
                            <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center
                                @(room.Name == activeRoom ? "active" : null)" @onclick="@(async _ => await TryJoinRoom(room.Name))">
                                @room.Name
                                <span class="badge badge-primary badge-pill">
                                    @($"{room.ParticipantCount} / {room.MaxParticipants}")
                                </span>

                                @room.Id
                            </button>
                        }
                    }
                </div>
                @*<div class="d-flex my-2 dropdown-item">
                        <div class="flex-grow-1">
                            Dimitar Petrov
                        </div>
                        <svg class="m-1" xmlns="http://www.w3.org/2000/svg" height="16" width="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </div>
                    <div class="d-flex my-2 dropdown-item">
                        <div class="flex-grow-1">
                            Stefko Tsonyvski
                        </div>
                        <svg class="ml-1" xmlns="http://www.w3.org/2000/svg" height="16" width="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </div>
                    <div class=" d-flex my-2 dropdown-item">
                        <div class="flex-grow-1">
                            Niki Kostov
                        </div>
                        <svg class="ml-1" xmlns="http://www.w3.org/2000/svg" height="16" width="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </div>
                    <div class="d-flex my-2 dropdown-item">
                        <div class="flex-grow-1">
                            Miroslav Uzunov
                        </div>
                        <svg class="ml-1" xmlns="http://www.w3.org/2000/svg" height="16" width="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </div>*@
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="createRoomModal" tabindex="-1" aria-labelledby="createRoomModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createRoomModalLable">Create  room</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control form-control-lg"
                       placeholder="Room name" aria-label="Room Name" disabled="@(this.activeCamera is null)"
                       @bind="this.roomName" @onkeydown="@(async args => await TryAddRoom(args))" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button class="btn btn-lg btn-info"
                        disabled="@(this.activeCamera is null || this.roomName is null)"
                        @onclick="@(async args => await TryAddRoom(args))">
                    Create Room  <span class="badge">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" />
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                        </svg>
                    </span>
                </button>
            </div>
        </div>
    </div>
</div>

@code{
    private List<RoomDetails> rooms = new List<RoomDetails>();

    private string roomName;
    private string activeCamera;
    private string activeRoom;
    private HubConnection hubConnection;

    [Parameter]
    public string UserIdentityName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.rooms = this.TwilioService.GetAllRoomsAsync().ToList();

        this.hubConnection = new HubConnectionBuilder()
        .AddMessagePackProtocol()
        .WithUrl(this.NavigationManager.BaseUri + "hubs/VideoHub")
        .WithAutomaticReconnect()
        .Build();

        this.hubConnection.On<string>(HubEndpoints.RoomsUpdated, this.OnRoomAdded);
        await this.hubConnection.StartAsync();
    }

    protected async ValueTask TryAddRoom(object args)
    {
        if (string.IsNullOrEmpty(this.roomName) || this.roomName is { Length: 0 })
        {
            return;
        }

        var takeAction = args switch
        {
            KeyboardEventArgs keyboard when keyboard.Key == "Enter" => true,
            MouseEventArgs _ => true,
            _ => false,
        };

        if (takeAction)
        {
            var addedOrJoined = await this.TryJoinRoom(this.roomName);
            if (addedOrJoined)
            {
                this.roomName = null;
            }
        }
    }

    protected async ValueTask<bool> TryJoinRoom(string roomName)
    {
        if (string.IsNullOrEmpty(roomName) || roomName is { Length: 0 })
        {
            return false;
        }

        var jwt = this.TwilioService.GetTwilioJwt(this.UserIdentityName);
        if (string.IsNullOrEmpty(jwt?.Token))
        {
            return false;
        }

        var joined = await this.JavaScript.CreateOrJoinRoomAsync(roomName, jwt.Token);
        if (joined)
        {
            this.activeRoom = roomName;
            await this.hubConnection.InvokeAsync(HubEndpoints.RoomsUpdated, this.activeRoom);
        }

        return joined;
    }

    private async ValueTask OnLeaveRoom()
    {
        await this.JavaScript.LeaveRoomAsync();
        await this.hubConnection.InvokeAsync(HubEndpoints.RoomsUpdated, this.activeRoom = null);
        if (!string.IsNullOrWhiteSpace(this.activeCamera))
        {
            await this.JavaScript.StartVideoAsync(this.activeCamera, "#camera");
        }
    }

    private async Task OnCameraChanged(string activeCamera) =>
        await this.InvokeAsync(() => this.activeCamera = activeCamera);

    private async Task OnRoomAdded(string roomName) =>
        await this.InvokeAsync(() =>
        {
            this.rooms = this.TwilioService.GetAllRoomsAsync().ToList();
            this.StateHasChanged();
        });
}