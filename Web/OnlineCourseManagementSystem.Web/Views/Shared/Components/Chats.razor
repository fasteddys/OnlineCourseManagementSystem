@inject OnlineCourseManagementSystem.Services.Data.IChatsService chatsService
@inject OnlineCourseManagementSystem.Services.Data.IUsersService usersService
@inject OnlineCourseManagementSystem.Services.Data.IMessagesService messagesService
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<style>
    .container-chat {
        display: flex;
        flex-direction: row;
        background-color: #36393f;
        color: aliceblue;
        padding-bottom: 10rem;
        position: relative;
        border-radius: 10px;
    }

    .user-add {
        left: 0px auto;
        width: 150px;
        font-size: smaller;
        display: flex;
        flex-direction: column;
    }

    .added-chats {
        right: 0px auto;
        width: 500px;
        font-size: smaller;
        display: flex;
        flex-direction: column;
        margin-left: 1rem;
    }

    .chat-heading {
        padding: 0.7rem;
        font-size: 15px;
        margin-bottom: 2rem;
        color: white;
        margin-left: 2rem;
        margin-inline: 1rem;
    }

    .chat {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        position: relative;
        margin: 1rem;
        flex-direction: column;
        width: 100%;
    }

    .chat-sidebar {
        display: flex;
        flex-direction: column;
        background: #2f3136;
        padding-bottom: 20rem;
        width: 250px;
        border-radius: 10px;
        margin: 1rem;
    }

    .chats {
        display: flex;
        flex-direction: column;
    }

    .chat-item {
        padding: 0.7rem;
        opacity: 0.4;
        width: 45%;
        font-size: 15px;
        display: flex;
        flex-direction: row;
    }

        .chat-item:hover {
            opacity: 1;
            background: #3e4148;
            cursor: pointer;
            border-radius: 4px;
        }

    .card-body {
        display: flex;
        flex-direction: column;
    }

    .content-messages {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        padding-bottom: 40rem;
        background: #2f3136;
        margin-bottom: 0.5rem;
        width: 100%;
    }

    .messaging-container {
        background: #2f3136;
        width: 100%;
        padding: 1rem;
        bottom: 0px auto;
        border-radius: 4px;
    }

    .message {
        margin: 0.5rem;
        width: 100%;
        padding: 1rem;
    }


    .friend-item {
        margin: 0.7rem;
        padding: 1rem;
        display: flex;
        flex-direction: row;
    }

        .friend-item:hover {
            background: #3e4148;
            cursor: pointer;
        }

    .friend-name {
        margin-right: 1rem;
    }

    .btn-add-friend {
        padding: 0.7rem;
        background: #808080;
        color: white;
        opacity: 0.5;
    }

    #CreateChatWithFriends {
        color: black;
    }

    .input-message {
        width: 90%;
        padding: 1rem;
        border-radius: 10px;
        font-size: 15px;
    }

    @@media (min-width: 600px){
        .chat-sidebar{
            width: 50%;
            height: 50%
        }
    }
</style>

<div class="container-chat">
    <div class="chat-sidebar">
        <h3 class="chat-heading">
            Chats  
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#CreateChatWithFriends">
                +
            </button>
        </h3>
        <div class="chats">
            <div class="added-chats">
                   @foreach (var chat in this.ViewModel.Chats)
                   {
                <div class="chat-item" @onclick="() => this.OpenChat(chat.ChatId)">
                    @if (chat.Users.Count() > 2)
                    {
                        <img style="margin-right: 0.5rem; background: #891aea;height: 40px; width: 40px; border-radius: 50%;" src="https://image.flaticon.com/icons/png/512/33/33308.png" />
                    }
                    else
                    {
                <img style="margin-right: 0.5rem; background:#ff6a00; height: 40px; width: 40px; border-radius: 50%;" src="https://image.flaticon.com/icons/png/512/1077/1077114.png" />
                    }
                    @chat.Name.Substring(0, (int)Math.Floor((decimal)chat.Name.Length / 2))

                </div>
                   }
            </div>

            <div class="modal fade" id="CreateChatWithFriends" tabindex="-1" aria-labelledby="CreateChatWithFriendsLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="CreateChatWithFriendsLabel">Choose Friends</h5>
                            <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close">X</button>
                        </div>
                        <div class="modal-body">
                            <input style="margin:1rem;" @bind-value:event="oninput" @bind-value="this.Name" />

                            @foreach (var friend in this.Friends.Where(x => x.FirstName.ToLower().Contains(this.Name.ToLower())))
                            {
                                
                                  <div class="friend-item" @onclick="() => this.Mark(friend.Id)">
                                      <div class="friend-name">
                                          @friend.FirstName @friend.LastName
                                      </div>
                                      <div>
                                          @if (this.MarkedFriends[friend.Id])
                                          {
                                              <div>
                                                  Marked

                                              </div>
                                          }
                                          else
                                          {
                                              <div>
                                                  UnMarked
                                              </div>
                                          }
                                      </div>
                                  </div>
                             }
                        </div>
                        <div class="modal-footer" style="display:flex;justify-content:center; align-items:center;">
                            <button @onclick="@Create" class="btn" style="background:#891aea; width: 10rem; border-radius: 4px;">Create Chat</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="chat">
        @if (this.CurrentOpenedChatId != null)
        {
            <div style="background-color: gray; width: 100%; font-size:15px; left: 0px auto; padding: 1rem; border-radius: 4px">
                @this.ChatName.Substring(0, (int)Math.Floor((decimal)this.ChatName.Length / 2))...
            </div>
            <div class="content-messages">
                @foreach (var message in this.Messages)
                {
                    <div class="message">
                        <div style="opacity: 0.5;">
                            @message.CreatorName
                        </div>
                        <div style="color: white; font-size: 10px;">
                            @message.Content
                        </div>
                    </div>
                }
            </div>
            <div class="messaging-container">
                <div class="input-form">
                    <EditForm Model="@this.CreateMessageInputModel" OnValidSubmit="@WriteMessage">
                        <InputText class="input-message" @bind-Value="@this.CreateMessageInputModel.Content" />
                        <button class="btn btn-message" style="background-color:white; color: black; padding: 0.5rem;">
                            <img src="https://image.flaticon.com/icons/png/512/565/565340.png" style="height:30px; width:30px;" />
                        </button>
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <div>
                No chat choosen
            </div>
        }

    </div>
</div>
@code {
    private string Name = "";
    private string ChatName = "";
    private bool IsTrue;

    Dictionary<int, List<int>> BgcolorsPerChat = new Dictionary<int, List<int>>();

    private Dictionary<string, bool> MarkedFriends = new Dictionary<string, bool>();
    private AllChatsViewModel ViewModel = new AllChatsViewModel();

    private CreateChatInputModel InputModel = new CreateChatInputModel();
    private CreateMessageInputModel CreateMessageInputModel = new CreateMessageInputModel();

    private IEnumerable<UserViewModel> Friends;
    private IEnumerable<MessageViewModel> Messages;
    private Dictionary<int, bool> ChatsStatus = new Dictionary<int, bool>();

    private int? CurrentOpenedChatId;
    private bool IsModalVisible;


    async Task Create()
    {
        this.InputModel.CreatorId = CreatorId;
        this.InputModel.FriendsToAdd = this.MarkedFriends.Where(f => f.Value).Select(x => x.Key);
        await this.chatsService.CreateAsync(this.InputModel);
        this.Load();
    }

    protected override void OnInitialized()
    {
        this.IsModalVisible = false;
        this.Load();
    }

    void MadeModalVisible()
    {
        this.IsModalVisible = !this.IsModalVisible;
    }

    void Load()
    {
        this.Friends = this.usersService.GetAll<UserViewModel>().Where(x => x.Id != CreatorId);

        this.ViewModel.Chats = this.chatsService.GetAllBy<ChatViewModel>(this.CreatorId);
        foreach (var chat in this.ViewModel.Chats)
        {
            chat.Users = this.chatsService.GetUserByChat<UserViewModel>(chat.ChatId);
        }

        foreach (var chat in this.ViewModel.Chats)
        {
            this.ChatsStatus[chat.ChatId] = false;
        }

        foreach (var friend in this.Friends)
        {
            this.MarkedFriends[friend.Id] = false;
        }
    }

    void LoadMessages()
    {
        this.Messages = this.messagesService.GetAllBy<MessageViewModel>((int)this.CurrentOpenedChatId);
    }

    void OpenChat(int chatId)
    {
        this.CurrentOpenedChatId = chatId;
        this.ChatsStatus[chatId] = !this.ChatsStatus[chatId];
        this.ChatName = chatsService.GetAllBy<ChatViewModel>(this.CreatorId).FirstOrDefault(c => c.ChatId == chatId).Name;
        //this.ChatsName = chatsService.GetNameBy(this.CurrentOpenedChatId);
        this.LoadMessages();

    }

    async Task WriteMessage()
    {
        if (this.CreateMessageInputModel.Content != string.Empty)
        {
            this.CreateMessageInputModel.UserId = this.CreatorId;
            this.CreateMessageInputModel.ChatId = this.CurrentOpenedChatId;

            await this.messagesService.Create(this.CreateMessageInputModel);
            this.CreateMessageInputModel.Content = string.Empty;

            this.LoadMessages();
        }
    }

    void Mark(string userId)
    {
        this.MarkedFriends[userId] = !this.MarkedFriends[userId];
    }

    void SearchFriends(string name)
    {
        this.Friends = this.Friends.Where(x => x.FirstName.ToLower().Contains(name));
    }

    [Parameter]
    public string CreatorId { get; set; }
}
