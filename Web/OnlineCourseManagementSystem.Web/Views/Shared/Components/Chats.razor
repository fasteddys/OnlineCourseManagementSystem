@inject OnlineCourseManagementSystem.Services.Data.IChatsService chatsService
@inject OnlineCourseManagementSystem.Services.Data.IUsersService usersService
@inject OnlineCourseManagementSystem.Services.Data.IMessagesService messagesService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<style>
    .container-chat {
        display: flex;
        flex-direction: row;
        background-color: #36393f;
        color: aliceblue;
        padding-bottom: 10rem;
        position: relative;
        border-radius: 10px;
    }

    .user-add {
        left: 0px auto;
        width: 150px;
        font-size: smaller;
        display: flex;
        flex-direction: column;
    }

    .chats {
        right: 0px auto;
        width: 500px;
        font-size: smaller;
        display: flex;
        flex-direction: column;
        margin-left: 1rem;
    }

    .chat-heading {
        padding: 0.7rem;
        font-size: 15px;
        margin-bottom: 2rem;
        color: white;
        margin-left: 2rem;
        margin-inline: 1rem;
    }

    .chat {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        position: relative;
        margin: 1rem;
        flex-direction: column;
        width: 100%;
    }

    .chat-sidebar {
        display: flex;
        flex-direction: column;
        background: #2f3136;
        width: 420px;
        border-radius: 10px;
        margin: 1rem;
        height: 46.5rem;
        /*width: inherit;*/
        overflow-y: scroll;
        overflow-x: hidden;
    }
        .chat-sidebar::-webkit-scrollbar {
            width: 15px;
        }

        .chat-sidebar::-webkit-scrollbar-track {
            -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
            border-radius: 10px;
        }

        .chat-sidebar::-webkit-scrollbar-thumb {
            background-color: orange;
            border-radius: 10px;
        }

    .all-chats {
        display: flex;
        flex-direction: column;
    }

    .chat-item {
        display: flex;
        flex-direction: row;
        padding: 0.5rem;
        opacity: 0.4;
        width: 50%;
        font-size: 13px;
        margin:0.5rem 0 0.5rem 0;
    }

        .chat-item:hover {
            opacity: 1;
            background: #3e4148;
            cursor: pointer;
            border-radius: 4px;
        }

        .chat-item-onclick {
            opacity: 1;
            background: #3e4148;
            cursor: pointer;
            border-radius: 4px;
        }

    .card-body {
        display: flex;
        flex-direction: column;
    }


    .close{
        color:aqua;
    }

    .close:hover{
        transform: scale(1.03);
        transition: transform 250ms;
        color:white;
    }

    .content-messages {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        padding-bottom: 0.5rem;
        background: #2f3136;
        height: 35rem;
        width: inherit;
        overflow-y: scroll;
        overflow-x:hidden;
        margin: 1rem;
    }

        .content-messages::-webkit-scrollbar {
            width: 15px;
        }

        .content-messages::-webkit-scrollbar-track {
            -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
            border-radius: 10px;
        }

        .content-messages::-webkit-scrollbar-thumb {
            background-color: orange;
            border-radius: 10px;
        }


    .messaging-container {
        background: #2f3136;
        width: 100%;
        padding: 1rem;
        bottom: 0px auto;
        border-radius: 4px;
    }

    .message {
        margin: 0.3rem;
        width: 100%;
        padding: 0.6rem;
        font-size: 15px;
    }


    .friend-item {
        margin: 0.7rem;
        padding: 1rem;
        display: flex;
        flex-direction: row;
    }

        .friend-item:hover {
            background: #535760;
            cursor: pointer;
        }

    .friend-name {
        margin-right: 1rem;
    }

    .btn-add-friend {
        padding: 0.7rem;
        background: #808080;
        color: white;
        opacity: 0.5;
    }

    #CreateChatWithFriends {
        color: black;
    }



    .input-message {
        width: 90%;
        padding: 1rem;
        border-radius: 10px;
        font-size: 15px;
    }

    @@media (max-width: 600px){
        .chat-sidebar{
            width: 50%;
            height: 50%
        }
    }

    .dropbtn:after {
        content: '\2807';
        font-size: 2.5em;
        color: white;
        z-index:3;
    }

    .dropbtn:hover {
        transform: scale(1.05);
        transition: transform 350ms;
    }

    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-content a {
        padding: 12px 16px;
        text-decoration: none;
        display: block;
    }

    .dropdown-content {
        display: none;
        position: fixed;
        margin-top: 60px;
        background-color: #891aea;
        min-width: 160px;
        overflow: auto;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
        color: white;
        background: #2f3136;
    }

    .unmarked {
        border-radius: 5px;
        height: 20px;
        width: 20px;
        background-color: white;
        box-shadow: 0 0 0 3px #3e4148;
    }

    .marked {
        border-radius: 5px;
        height: 20px;
        width: 20px;
        box-shadow: 0 0 0 3px #3e4148;
        background-color: #3e4148;
    }



    .option{
        opacity: 0.4;
    }

        .option:hover {
            opacity: 1;
            background: #3e4148;
            cursor: pointer;
            color: white;
        }

    .show {
        display: block;
    }

</style>

<div class="container-chat">
    <div class="chat-sidebar">
        <h3 class="chat-heading">
            Add Chat
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#CreateChatWithFriends">
                +
            </button>
        </h3>
        <div class="all-chats">
            <div class="chats">
                <h3>Pinned</h3>
                @foreach (var chat in this.ViewModel.PinnedChats)
                {
                    if (chat.ChatId == this.CurrentRoom)
                    {
                        this.className = "chat-item-onclick";
                    }
                    else
                    {
                        this.className = string.Empty;
                    }

                    <div class="chat-item @this.className" oncontextmenu="return false;" onmouseup="showDropdown()" @onclick="() => this.OpenChat(chat.ChatId)" >
                            @if (chat.Users.Count() > 2)
                            {
                                <img style="margin-right: 0.5rem; background: #891aea;height: 40px; width: 40px; border-radius: 50%;" src="https://image.flaticon.com/icons/png/512/33/33308.png" />
                            }
                            else
                            {
                                <img style="margin-right: 0.5rem; background:#ff6a00; height: 40px; width: 40px; border-radius: 50%;" src="https://image.flaticon.com/icons/png/512/1077/1077114.png" />
                            }
                            <div style="display:flex; flex-direction:column;margin-right:10px;">
                                <div>
                                    @chat.Name.Substring(0, (int)Math.Floor((decimal)chat.Name.Length / 2))...
                                </div>
                                <div>
                                    @chat.UsersPerChatCount users
                                </div>
                            </div>
                        <a class="close" data-bs-toggle="modal" data-bs-target="#LeaveChat" style="position: relative" @onclick="() => this.LeaveChat(chat.ChatId)" aria-label="close">x</a>
                    </div>
                    <div id="myDropdown" class="dropdown-content">
                        <a class="option"  @onclick="() => this.UnpinChat(chat.ChatId)">Unpin</a>
                        <a class="option" @onclick="() => this.MuteChat(chat.ChatId)">Mute</a>
                    </div>
                    
                }
            </div>
            <div class="chats">
                <h3>Chats</h3>
                @foreach (var chat in this.ViewModel.Chats)
                {
                    if (chat.ChatId == this.CurrentRoom)
                    {
                        this.className = "chat-item-onclick";
                    }
                    else
                    {
                        this.className = string.Empty;
                    }

                    <div class="chat-item @this.className" oncontextmenu="return false;" onmouseup="showDropdown()" @onclick="() => this.OpenChat(chat.ChatId)" >
                        @if (chat.Users.Count() > 2)
                        {
                            <img style="margin-right: 0.5rem; background: #891aea;height: 40px; width: 40px; border-radius: 50%;" src="https://image.flaticon.com/icons/png/512/33/33308.png" />
                        }
                        else
                        {
                            <img style="margin-right: 0.5rem; background:#ff6a00; height: 40px; width: 40px; border-radius: 50%;" src="https://image.flaticon.com/icons/png/512/1077/1077114.png" />
                        }
                        <div style="display:flex; flex-direction:column;margin-right:10px;">
                            <div>
                                @chat.Name.Substring(0, (int)Math.Floor((decimal)chat.Name.Length / 2))
                            </div>
                            <div>
                                @chat.UsersPerChatCount users
                            </div>
                        </div>
                        <a class="close" data-bs-toggle="modal" data-bs-target="#LeaveChat" style="position: relative" @onclick="() => this.LeaveChat(chat.ChatId)" aria-label="close">x</a>
                    </div>
                    <div id="myDropdown" class="dropdown-content">
                        <a class="option" @onclick="() => this.PinChat(chat.ChatId)">Pin</a>
                        <a class="option" @onclick="() => this.MuteChat(chat.ChatId)">Mute</a>
                    </div>
                }
            </div>

            <div class="modal fade" id="LeaveChat" tabindex="-1" aria-labelledby="LeaveChat" aria-hidden="true" >
                <div class="modal-dialog" >
                    <div class="modal-content" style="background:#2f3136">
                        <div class="modal-body">
                            <h2 style="color:white">Leave Group with @this.ChatName</h2>
                        </div>
                        <div class="modal-footer" style="display:flex;justify-content:center; align-items:center;">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" data-bs-dismiss="modal" class="btn btn-danger" @onclick="() => this.LeaveChat()">Leave</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal fade" id="CreateChatWithFriends" tabindex="-1" aria-labelledby="CreateChatWithFriendsLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="CreateChatWithFriendsLabel">Choose Friends</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">X</button>
                        </div>
                        <div class="modal-body" style="background:#2f3136">
                            <input style="margin:1rem;" @bind-value:event="oninput" @bind-value="this.FriendName" />

                            @foreach (var friend in this.Friends.Where(x => x.FirstName.ToLower().Contains(this.FriendName.ToLower())))
                            {

                                <div class="friend-item" @onclick="() => this.Mark(friend.Id)">
                                    <div class="friend-name">
                                        @friend.FirstName @friend.LastName
                                    </div>
                                    <div style="right:3px; position: absolute;">
                                        @if (this.MarkedFriends[friend.Id])
                                        {
                                            <div class="marked">
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="unmarked">
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="modal-footer" style="display:flex;justify-content:center; align-items:center;">
                            <button @onclick="@CreateChat" class="btn" style="background:#891aea; width: 10rem; border-radius: 4px;">Create Chat</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="chat">
        @if (this.CurrentRoom != null)
        {
            <div style="background-color: gray; width: 100%; font-size:15px; left: 0px auto; padding: 1rem; border-radius: 4px">
                @this.ChatName.Substring(0, (int)Math.Floor((decimal)this.ChatName.Length / 2))...
            </div>
            <div id="messages" class="content-messages">
                @foreach (var message in this.MessagesTest[(int)this.CurrentRoom])
                {
                    <div class="message">
                        <div style="opacity: 0.5;">
                            @message.CreatorName
                        </div>
                        <div style="color: white; font-size: 13px;">
                            @message.Content
                        </div>
                    </div>
                }
            </div>
            <div class="messaging-container">
                <div class="input-form">
                    <EditForm Model="@this.CreateMessageInputModel" OnValidSubmit="@WriteMessage">
                        <InputText class="input-message" @bind-Value="@this.CreateMessageInputModel.Content" />
                        <button class="btn btn-message" style="background-color:white; color: black; padding: 0.5rem;">
                            <img src="https://image.flaticon.com/icons/png/512/565/565340.png" style="height:30px; width:30px;" />
                        </button>
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <div>
                No chat choosen
            </div>
        }

    </div>
</div>
@code {
    private int LeftChatId = 0;
    private string FriendName = "";
    private string ChatName = "";
    private bool IsTrue;
    private int? CurrentRoom;
    private bool IsModalVisible;
    private HubConnection hubConnection;
    string className;

    private IDictionary<string, bool> MarkedFriends = new Dictionary<string, bool>();
    private AllChatsViewModel ViewModel = new AllChatsViewModel();
    private CreateChatInputModel InputModel = new CreateChatInputModel();
    private CreateMessageInputModel CreateMessageInputModel = new CreateMessageInputModel();
    private IEnumerable<UserViewModel> Friends;
    private IDictionary<int, ICollection<MessageViewModel>> MessagesTest = new Dictionary<int, ICollection<MessageViewModel>>();

    async Task CreateChat()
    {
        this.InputModel.CreatorId = UserId;
        this.InputModel.FriendsToAdd = this.MarkedFriends.Where(f => f.Value).Select(x => x.Key);
        await this.chatsService.CreateAsync(this.InputModel);
        this.Load();
    }

    protected override async Task OnInitializedAsync()
    {
        this.Load();
        this.hubConnection = new HubConnectionBuilder()
    .WithUrl(this.NavigationManager.BaseUri + "hubs/ChatHub")
    .Build();
        this.hubConnection.On<string, string, int>("SendMessage", (name, message, room) =>
        {
            MessageViewModel messageViewModel = new MessageViewModel()
            {
                CreatorName = name,
                Content = message,
            };

            if (!this.MessagesTest.ContainsKey(room))
            {
                this.MessagesTest.Add(room, new List<MessageViewModel>());
            }

            this.MessagesTest[room].Add(messageViewModel);
            this.StateHasChanged();
            ScrollToBottom();
        });

        await this.hubConnection.StartAsync();

    }

    void MadeModalVisible()
    {
        this.IsModalVisible = !this.IsModalVisible;
    }

    void Load()
    {
        this.Friends = this.usersService.GetAll<UserViewModel>().Where(x => x.Id != UserId);

        this.ViewModel.Chats = this.chatsService.GetAllBy<ChatViewModel>(this.UserId);
        this.ViewModel.PinnedChats = this.chatsService.GetAllPinnedBy<ChatViewModel>(this.UserId);
        foreach (var chat in this.ViewModel.Chats)
        {
            chat.Users = this.chatsService.GetUsersByChat<UserViewModel>(chat.ChatId);
        }

        foreach (var chat in this.ViewModel.PinnedChats)
        {
            chat.Users = this.chatsService.GetUsersByChat<UserViewModel>(chat.ChatId);
        }

        foreach (var friend in this.Friends)
        {
            this.MarkedFriends[friend.Id] = false;
        }
        this.StateHasChanged();

    }



    void OpenChat(int chatId)
    {
        this.CurrentRoom = chatId;
        this.ChatName = this.chatsService.GetNameBy(chatId);
        this.LoadMessages();
        ScrollToBottom();
    }

    async Task LeaveChat(int chatId = 0)
    {
        if (chatId != 0)
        {
            this.LeftChatId = chatId;
            return;
        }

        await this.chatsService.LeaveChat(this.LeftChatId, this.UserId);
        this.LeftChatId = 0;
        this.CurrentRoom = null;
        this.Load();
    }

    async Task PinChat(int chatId)
    {
        await this.chatsService.PinChat(chatId, this.UserId);
        this.Load();
    }

    async Task UnpinChat(int chatId)
    {
        await this.chatsService.UnPinChat(chatId, this.UserId);
        this.Load();
    }

    async Task MuteChat(int chatId)
    {
        await this.chatsService.MuteChat(chatId, this.UserId);
    }

    async Task UnmuteChat(int chatId)
    {
        await this.chatsService.UnmuteChat(chatId, this.UserId);
    }

    async Task WriteMessage()
    {
        if (this.CreateMessageInputModel.Content != string.Empty)
        {
            this.CreateMessageInputModel.UserId = this.UserId;
            this.CreateMessageInputModel.ChatId = this.CurrentRoom;

            await this.messagesService.Create(this.CreateMessageInputModel);

            await this.hubConnection.SendAsync("SendMessage", this.UserFullName ,this.CreateMessageInputModel.Content, (int)this.CurrentRoom);
            this.CreateMessageInputModel.Content = string.Empty;
        }
    }

    void LoadMessages()
    {
        if (!this.MessagesTest.ContainsKey((int)this.CurrentRoom))
        {
            this.MessagesTest.Add((int)this.CurrentRoom, new List<MessageViewModel>());
        }

        this.MessagesTest[(int)this.CurrentRoom] = this.messagesService.GetAllBy<MessageViewModel>((int)this.CurrentRoom).ToList();
    }

    void Mark(string userId)
    {
        this.MarkedFriends[userId] = !this.MarkedFriends[userId];
    }

    void SearchFriends(string name)
    {
        this.Friends = this.Friends.Where(x => x.FirstName.ToLower().Contains(name));
    }

    async void ScrollToBottom()
    {
        await this.JS.InvokeVoidAsync("scrollToBottom");
    }

    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public string UserFullName { get; set; }
}
